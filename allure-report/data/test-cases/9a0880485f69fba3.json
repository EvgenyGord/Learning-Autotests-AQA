{"uid":"9a0880485f69fba3","name":"Проверка создания пользователя","fullName":"tests.test_ui.test_first#test_positive_registration_with_fixture_params","historyId":"6852ce31fe0093ceef77af096d9d7767","time":{"start":1760785767060,"stop":1760785770273,"duration":3213},"description":"\nЭтот тест проверяет:\n- Регистрацию пользователя с позитивным сценарием\n- Прохождение регистрации на данных параметров фикстуры registration_data_with_params (хранится в test_ui/conftest.py)\n- Проверка успеха прохождения регистрации \nИЛИ\n- Проверка предупреждения, что пользователь уже создан с таким email\n","descriptionHtml":"<p>Этот тест проверяет:</p>\n<ul>\n<li>Регистрацию пользователя с позитивным сценарием</li>\n<li>Прохождение регистрации на данных параметров фикстуры registration_data_with_params (хранится в test_ui/conftest.py)</li>\n<li>Проверка успеха прохождения регистрации<br />\nИЛИ</li>\n<li>Проверка предупреждения, что пользователь уже создан с таким email</li>\n</ul>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=141.0.7390.107)\nStacktrace:\n#0 0x55593613867a <unknown>\n#1 0x555935bb7566 <unknown>\n#2 0x555935bae470 <unknown>\n#3 0x555935b9f926 <unknown>\n#4 0x555935ba172b <unknown>\n#5 0x555935b9feb1 <unknown>\n#6 0x555935b9f650 <unknown>\n#7 0x555935b9f302 <unknown>\n#8 0x555935b9d142 <unknown>\n#9 0x555935b9d92a <unknown>\n#10 0x555935bbaa99 <unknown>\n#11 0x555935c55ee5 <unknown>\n#12 0x555935c2f632 <unknown>\n#13 0x555935c55328 <unknown>\n#14 0x555935c2f403 <unknown>\n#15 0x555935bfbb02 <unknown>\n#16 0x555935bfc7c1 <unknown>\n#17 0x5559360fc448 <unknown>\n#18 0x5559361002af <unknown>\n#19 0x5559360e38d9 <unknown>\n#20 0x555936100e55 <unknown>\n#21 0x5559360c913f <unknown>\n#22 0x5559361254b8 <unknown>\n#23 0x555936125693 <unknown>\n#24 0x555936137613 <unknown>\n#25 0x7f9b96a24b7b <unknown>","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"80cc824f0839d84dfcba610d6855d83d\")>\nbase_url = 'http://31.59.174.108'\nwait = <selenium.webdriver.support.wait.WebDriverWait (session=\"80cc824f0839d84dfcba610d6855d83d\")>\nregistration_data_with_params = {'email': 'test2@mail.ru', 'name': 'User25', 'password': 'qwertyu1'}\n\n    @allure.epic(\"Аутентификация и авторизация\")\n    @allure.feature(\"Регистрация пользователей\")\n    @allure.suite(\"Смоук тесты\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.tag(\"smoke\", \"ui\")\n    @allure.label(\"owner\", \"QA - evgeny_gord\")\n    @allure.id(\"TEST-123\")\n    @allure.title(\"Проверка создания пользователя\")\n    @allure.description(\"\"\"\n    Этот тест проверяет:\n    - Регистрацию пользователя с позитивным сценарием\n    - Прохождение регистрации на данных параметров фикстуры registration_data_with_params (хранится в test_ui/conftest.py)\n    - Проверка успеха прохождения регистрации\n    ИЛИ\n    - Проверка предупреждения, что пользователь уже создан с таким email\n    \"\"\")\n    @allure.link(\"https://jira.example.com/TEST-123\", name=\"JIRA Task\")\n    @allure.issue(\"BUG-456\", \"https://bugtracker.com/BUG-456\")\n    @allure.testcase(\"TC-789\", \"https://testcase.com/TC-789\")\n    def test_positive_registration_with_fixture_params(browser, base_url, wait, registration_data_with_params):\n        #driver = webdriver.Chrome(service=Service(executable_path='C:/chromedriver.exe'))\n        # driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n        # driver.get(url)\n        with allure.step('Переход на страницу Регистрации'):\n>           browser.get(f\"{base_url}/sign_up\")\n\ntests/test_ui/test_first.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:483: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f59f72d1f10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x555936125693 \\\\u003Cunknown>\\\\n#24 0x555936137613 \\\\u003Cunknown>\\\\n#25 0x7f9b96a24b7b \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=141.0.7390.107)\nE       Stacktrace:\nE       #0 0x55593613867a <unknown>\nE       #1 0x555935bb7566 <unknown>\nE       #2 0x555935bae470 <unknown>\nE       #3 0x555935b9f926 <unknown>\nE       #4 0x555935ba172b <unknown>\nE       #5 0x555935b9feb1 <unknown>\nE       #6 0x555935b9f650 <unknown>\nE       #7 0x555935b9f302 <unknown>\nE       #8 0x555935b9d142 <unknown>\nE       #9 0x555935b9d92a <unknown>\nE       #10 0x555935bbaa99 <unknown>\nE       #11 0x555935c55ee5 <unknown>\nE       #12 0x555935c2f632 <unknown>\nE       #13 0x555935c55328 <unknown>\nE       #14 0x555935c2f403 <unknown>\nE       #15 0x555935bfbb02 <unknown>\nE       #16 0x555935bfc7c1 <unknown>\nE       #17 0x5559360fc448 <unknown>\nE       #18 0x5559361002af <unknown>\nE       #19 0x5559360e38d9 <unknown>\nE       #20 0x555936100e55 <unknown>\nE       #21 0x5559360c913f <unknown>\nE       #22 0x5559361254b8 <unknown>\nE       #23 0x555936125693 <unknown>\nE       #24 0x555936137613 <unknown>\nE       #25 0x7f9b96a24b7b <unknown>\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1760785670477,"stop":1760785670646,"duration":169},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"browser","time":{"start":1760785755311,"stop":1760785767057,"duration":11746},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"base_url","time":{"start":1760785767057,"stop":1760785767057,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"registration_data_with_params","time":{"start":1760785767058,"stop":1760785767058,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"wait","time":{"start":1760785767058,"stop":1760785767058,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"description":"\nЭтот тест проверяет:\n- Регистрацию пользователя с позитивным сценарием\n- Прохождение регистрации на данных параметров фикстуры registration_data_with_params (хранится в test_ui/conftest.py)\n- Проверка успеха прохождения регистрации \nИЛИ\n- Проверка предупреждения, что пользователь уже создан с таким email\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=141.0.7390.107)\nStacktrace:\n#0 0x55593613867a <unknown>\n#1 0x555935bb7566 <unknown>\n#2 0x555935bae470 <unknown>\n#3 0x555935b9f926 <unknown>\n#4 0x555935ba172b <unknown>\n#5 0x555935b9feb1 <unknown>\n#6 0x555935b9f650 <unknown>\n#7 0x555935b9f302 <unknown>\n#8 0x555935b9d142 <unknown>\n#9 0x555935b9d92a <unknown>\n#10 0x555935bbaa99 <unknown>\n#11 0x555935c55ee5 <unknown>\n#12 0x555935c2f632 <unknown>\n#13 0x555935c55328 <unknown>\n#14 0x555935c2f403 <unknown>\n#15 0x555935bfbb02 <unknown>\n#16 0x555935bfc7c1 <unknown>\n#17 0x5559360fc448 <unknown>\n#18 0x5559361002af <unknown>\n#19 0x5559360e38d9 <unknown>\n#20 0x555936100e55 <unknown>\n#21 0x5559360c913f <unknown>\n#22 0x5559361254b8 <unknown>\n#23 0x555936125693 <unknown>\n#24 0x555936137613 <unknown>\n#25 0x7f9b96a24b7b <unknown>","statusTrace":"browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"80cc824f0839d84dfcba610d6855d83d\")>\nbase_url = 'http://31.59.174.108'\nwait = <selenium.webdriver.support.wait.WebDriverWait (session=\"80cc824f0839d84dfcba610d6855d83d\")>\nregistration_data_with_params = {'email': 'test2@mail.ru', 'name': 'User25', 'password': 'qwertyu1'}\n\n    @allure.epic(\"Аутентификация и авторизация\")\n    @allure.feature(\"Регистрация пользователей\")\n    @allure.suite(\"Смоук тесты\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @allure.tag(\"smoke\", \"ui\")\n    @allure.label(\"owner\", \"QA - evgeny_gord\")\n    @allure.id(\"TEST-123\")\n    @allure.title(\"Проверка создания пользователя\")\n    @allure.description(\"\"\"\n    Этот тест проверяет:\n    - Регистрацию пользователя с позитивным сценарием\n    - Прохождение регистрации на данных параметров фикстуры registration_data_with_params (хранится в test_ui/conftest.py)\n    - Проверка успеха прохождения регистрации\n    ИЛИ\n    - Проверка предупреждения, что пользователь уже создан с таким email\n    \"\"\")\n    @allure.link(\"https://jira.example.com/TEST-123\", name=\"JIRA Task\")\n    @allure.issue(\"BUG-456\", \"https://bugtracker.com/BUG-456\")\n    @allure.testcase(\"TC-789\", \"https://testcase.com/TC-789\")\n    def test_positive_registration_with_fixture_params(browser, base_url, wait, registration_data_with_params):\n        #driver = webdriver.Chrome(service=Service(executable_path='C:/chromedriver.exe'))\n        # driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n        # driver.get(url)\n        with allure.step('Переход на страницу Регистрации'):\n>           browser.get(f\"{base_url}/sign_up\")\n\ntests/test_ui/test_first.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:483: in get\n    self.execute(Command.GET, {\"url\": url})\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f59f72d1f10>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\\\n#23 0x555936125693 \\\\u003Cunknown>\\\\n#24 0x555936137613 \\\\u003Cunknown>\\\\n#25 0x7f9b96a24b7b \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=141.0.7390.107)\nE       Stacktrace:\nE       #0 0x55593613867a <unknown>\nE       #1 0x555935bb7566 <unknown>\nE       #2 0x555935bae470 <unknown>\nE       #3 0x555935b9f926 <unknown>\nE       #4 0x555935ba172b <unknown>\nE       #5 0x555935b9feb1 <unknown>\nE       #6 0x555935b9f650 <unknown>\nE       #7 0x555935b9f302 <unknown>\nE       #8 0x555935b9d142 <unknown>\nE       #9 0x555935b9d92a <unknown>\nE       #10 0x555935bbaa99 <unknown>\nE       #11 0x555935c55ee5 <unknown>\nE       #12 0x555935c2f632 <unknown>\nE       #13 0x555935c55328 <unknown>\nE       #14 0x555935c2f403 <unknown>\nE       #15 0x555935bfbb02 <unknown>\nE       #16 0x555935bfc7c1 <unknown>\nE       #17 0x5559360fc448 <unknown>\nE       #18 0x5559361002af <unknown>\nE       #19 0x5559360e38d9 <unknown>\nE       #20 0x555936100e55 <unknown>\nE       #21 0x5559360c913f <unknown>\nE       #22 0x5559361254b8 <unknown>\nE       #23 0x555936125693 <unknown>\nE       #24 0x555936137613 <unknown>\nE       #25 0x7f9b96a24b7b <unknown>\n\n/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException","steps":[{"name":"Переход на страницу Регистрации","time":{"start":1760785767060,"stop":1760785770272,"duration":3212},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=141.0.7390.107)\nStacktrace:\n#0 0x55593613867a <unknown>\n#1 0x555935bb7566 <unknown>\n#2 0x555935bae470 <unknown>\n#3 0x555935b9f926 <unknown>\n#4 0x555935ba172b <unknown>\n#5 0x555935b9feb1 <unknown>\n#6 0x555935b9f650 <unknown>\n#7 0x555935b9f302 <unknown>\n#8 0x555935b9d142 <unknown>\n#9 0x555935b9d92a <unknown>\n#10 0x555935bbaa99 <unknown>\n#11 0x555935c55ee5 <unknown>\n#12 0x555935c2f632 <unknown>\n#13 0x555935c55328 <unknown>\n#14 0x555935c2f403 <unknown>\n#15 0x555935bfbb02 <unknown>\n#16 0x555935bfc7c1 <unknown>\n#17 0x5559360fc448 <unknown>\n#18 0x5559361002af <unknown>\n#19 0x5559360e38d9 <unknown>\n#20 0x555936100e55 <unknown>\n#21 0x5559360c913f <unknown>\n#22 0x5559361254b8 <unknown>\n#23 0x555936125693 <unknown>\n#24 0x555936137613 <unknown>\n#25 0x7f9b96a24b7b <unknown>\n\n","statusTrace":"  File \"/app/tests/test_ui/test_first.py\", line 177, in test_positive_registration_with_fixture_params\n    browser.get(f\"{base_url}/sign_up\")\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 483, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 458, in execute\n    self.error_handler.check_response(response)\n  File \"/usr/local/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"hasContent":true,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":0}],"attachments":[{"uid":"81fcfd737fd747da","name":"stdout","source":"81fcfd737fd747da.txt","type":"text/plain","size":137}],"parameters":[],"hasContent":true,"stepsCount":1,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[{"name":"browser::0","time":{"start":1760785770364,"stop":1760785770618,"duration":254},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"labels":[{"name":"tag","value":"smoke"},{"name":"severity","value":"critical"},{"name":"feature","value":"Регистрация пользователей"},{"name":"epic","value":"Аутентификация и авторизация"},{"name":"suite","value":"Смоук тесты"},{"name":"owner","value":"QA - evgeny_gord"},{"name":"as_id","value":"TEST-123"},{"name":"tag","value":"ui"},{"name":"parentSuite","value":"tests.test_ui"},{"name":"host","value":"ecb2b429c773"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_ui.test_first"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"registration_data_with_params","value":"{'email': 'test2@mail.ru', 'name': 'User25', 'password': 'qwertyu1'}"}],"links":[{"name":"https://testcase.com/TC-789","url":"TC-789","type":"tms"},{"name":"https://bugtracker.com/BUG-456","url":"BUG-456","type":"issue"},{"name":"JIRA Task","url":"https://jira.example.com/TEST-123","type":"link"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["ui","smoke"]},"source":"9a0880485f69fba3.json","parameterValues":["{'email': 'test2@mail.ru', 'name': 'User25', 'password': 'qwertyu1'}"]}