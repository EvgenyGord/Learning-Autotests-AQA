pipeline {
    agent any

    environment {
        ALLURE_RESULTS = "allure-results"
        SCREENSHOTS = "screenshots"
        DOCKER_IMAGE = "selenium-tests:latest"
        PROJECT_DIR = "C:\\qaRoad\\my_selenium_test"
        TARGET_URL = "http://31.59.174.108"
        TEST_DIR = "tests" // –ø–∞–ø–∫–∞ —Å —Ç–µ—Å—Ç–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∞
    }

    stages {

        stage('Preparation') {
            steps {
                echo 'üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤'
                bat "if not exist ${ALLURE_RESULTS} mkdir ${ALLURE_RESULTS}"
                bat "if not exist ${SCREENSHOTS} mkdir ${SCREENSHOTS}"
            }
        }

        stage('Copy Dockerfile to Workspace') {
            steps {
                echo 'üìÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Dockerfile –≤ workspace'
                bat "copy /Y \"${PROJECT_DIR}\\Dockerfile\" \"%WORKSPACE%\\Dockerfile\""
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤'
                bat "docker build -t ${DOCKER_IMAGE} -f \"%WORKSPACE%\\Dockerfile\" \"%WORKSPACE%\""
            }
        }

        stage('Check Target Availability') {
            steps {
                echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞: ${TARGET_URL}"
                script {
                    def result = bat(script: "curl -I ${TARGET_URL}", returnStatus: true)
                    if (result != 0) {
                        echo "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Å–∞–π—Ç ${TARGET_URL} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞."
                    } else {
                        echo "‚úÖ –°–∞–π—Ç ${TARGET_URL} –¥–æ—Å—Ç—É–ø–µ–Ω."
                    }
                }
            }
        }

        stage('Run Tests in Docker') {
            steps {
                echo 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ Docker'
                script {
                    catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                        bat """
                        docker run --rm ^
                            -v "%WORKSPACE%\\${ALLURE_RESULTS}:/app/${ALLURE_RESULTS}" ^
                            -v "%WORKSPACE%\\${SCREENSHOTS}:/app/${SCREENSHOTS}" ^
                            -v "${PROJECT_DIR}\\${TEST_DIR}:/app/${TEST_DIR}" ^
                            ${DOCKER_IMAGE} ^
                            pytest /app/${TEST_DIR} --alluredir=/app/${ALLURE_RESULTS}
                        """
                    }
                }
            }
        }

        stage('Generate Allure Report') {
            steps {
                echo 'üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Allure –æ—Ç—á–µ—Ç–∞'
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        bat "allure generate %WORKSPACE%\\${ALLURE_RESULTS} -o %WORKSPACE%\\allure-report --clean"
                    }
                }
            }
        }

        stage('Publish Allure Report') {
            steps {
                echo 'üì¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è Allure –æ—Ç—á–µ—Ç–∞ —á–µ—Ä–µ–∑ Allure Jenkins Plugin'
                allure([
                    includeProperties: false,
                    jdk: '',
                    reportBuildPolicy: 'ALWAYS',
                    results: [[path: "${ALLURE_RESULTS}"]]
                ])
            }
        }
    }

    post {
        always {
            echo 'üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ Docker'
            bat "docker container prune -f || echo '–ù–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è'"
            bat "docker image prune -f || echo '–ù–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤'"
        }
        success {
            echo "‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ! Allure Report –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ Jenkins."
        }
        unstable {
            echo "‚ö†Ô∏è –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à—ë–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏, –Ω–æ –æ—Ç—á—ë—Ç Allure –¥–æ—Å—Ç—É–ø–µ–Ω."
        }
        failure {
            echo "‚ùå –ü–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏."
        }
    }
}
